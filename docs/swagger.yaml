basePath: /api/v1
definitions:
  models.Admin:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_block:
        type: boolean
      location:
        type: string
      password:
        type: string
      password_hash:
        type: string
      status:
        type: string
      token:
        type: string
      updated_at:
        type: string
    required:
    - email
    - full_name
    - location
    type: object
  models.Food:
    properties:
      adminName:
        type: string
      created_at:
        type: string
      day:
        type: integer
      deleted_at:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      kitchen:
        type: string
      month:
        type: integer
      name:
        type: string
      status:
        type: string
      type:
        type: string
      updated_at:
        type: string
      weekday:
        type: string
      year:
        type: integer
    type: object
  models.FoodBeneficiary:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_block:
        type: boolean
      location:
        type: string
      password:
        type: string
      password_hash:
        type: string
      stack:
        type: string
      status:
        type: string
      token:
        type: string
      updated_at:
        type: string
    required:
    - email
    - full_name
    - location
    - stack
    type: object
  models.Image:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      product_id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.KitchenStaff:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_block:
        type: boolean
      location:
        type: string
      password:
        type: string
      password_hash:
        type: string
      status:
        type: string
      token:
        type: string
      updated_at:
        type: string
    required:
    - email
    - full_name
    - location
    type: object
  models.Notification:
    properties:
      day:
        type: integer
      message:
        type: string
      month:
        type: integer
      year:
        type: integer
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: info@lunchwallet.com
    name: Lunch-wallet Team API Support
    url: http://www.swagger.io/support
  description: This is a lunch wallet server.
  license:
    name: BSD
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Lunch Wallet Swagger API
  version: "1.0"
paths:
  /admin/blockedusers:
    get:
      consumes:
      - application/json
      description: Admin gets to see all blocked users with this endpoint. It is an
        authorized route to only ADMIN
      produces:
      - application/json
      responses:
        "200":
          description: blocked users successfully gotten
          schema:
            items:
              $ref: '#/definitions/models.FoodBeneficiary'
            type: array
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: This endpoint enables admin to see all blocked users
      tags:
      - Users
  /admin/blockfoodbeneficiary/{id}:
    put:
      consumes:
      - application/json
      description: Admin blocks a food beneficiary
      parameters:
      - description: id
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: food beneficiary blocked
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Block a food beneficiary
      tags:
      - Users
  /admin/createtimetable:
    post:
      consumes:
      - application/json
      description: 'creates meal by collecting fields in models.Food in a form data.
        Note: "images" is a file to be uploaded in jpeg or png. "name" is the name
        of the meal, "type" is either brunch or dinner, "weekday" can be ignored but
        it is either monday - sunday, "kitchen" is either uno, edo-tech park, etc.
        "year", "month" and "day" are numbers. It is an authorized route to only ADMIN'
      parameters:
      - description: images, type, name, kitchen, year, month, day
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Food'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Admin creates meal
      tags:
      - Food
  /admin/deletemeal/:id:
    delete:
      consumes:
      - application/json
      description: Delete meal by clicking on the particular food. The id of each
        food is attached to the link/endpoint. When you click on the food to be deleted,
        the id is gotten from the link/endpoint and the food is deleted. It is an
        authorized route to only ADMIN
      responses:
        "200":
          description: Successfully Deleted
          schema:
            type: string
        "401":
          description: not authorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Admin deletes meal
      tags:
      - Food
  /admin/getfoodbeneficiaryprofile/{id}:
    get:
      consumes:
      - application/json
      description: Admin gets to see the profile information of a food beneficiary.
        It is an authorized route to only ADMIN
      produces:
      - application/json
      responses:
        "200":
          description: successfully gotten
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets profile of a food beneficiary
      tags:
      - Users
  /admin/numberblocked:
    get:
      consumes:
      - application/json
      description: Admin gets to see how manuy beneficiaries blocked. It is an authorized
        route to only ADMIN
      produces:
      - application/json
      responses:
        "200":
          description: successfully gotten
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets number of blocked benefeciary
      tags:
      - Users
  /admin/updatemeal/:id:
    put:
      consumes:
      - application/json
      description: Update meal by clicking on the particular food. The id of each
        food is attached to the link/endpoint. When you click on the food to be updated,
        the id is gotten from the link/endpoint. It is an authorized route to only
        ADMIN
      responses:
        "200":
          description: Successfully updated
          schema:
            type: string
        "401":
          description: not authorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Admin updates meal
      tags:
      - Food
  /adminlogout:
    post:
      consumes:
      - application/json
      description: Log out admin
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      - description: User Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Logout User
      tags:
      - Users
  /benefactor/qrmealrecords:
    post:
      consumes:
      - application/json
      description: This is used to tell if a food beneficiary has scanned the QR code
        previously or not,it then logs the information .
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: meal already served
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Logs meal records in the database after successful QR code scan
      tags:
      - user
  /beneficiarylogout:
    post:
      consumes:
      - application/json
      description: Log out a kitchen staff
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      - description: User Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Logout User
      tags:
      - Users
  /changedinnerstatus:
    put:
      consumes:
      - application/json
      description: Change dinner food status by kitchen staff from NOT SERVING to
        either SERVED or SERVING
      parameters:
      - description: status
        in: body
        name: food
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Food'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Update Food
      tags:
      - Food
  /staff/changebrunchstatus:
    put:
      consumes:
      - application/json
      description: Change brunch food status by kitchen staff from NOT SERVING to
        either SERVED or SERVING
      parameters:
      - description: status
        in: body
        name: food
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Food'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Update Food
      tags:
      - Food
  /staff/generateqrcode:
    get:
      consumes:
      - application/json
      description: This should be used to get the food in the database to generate
        QR code meant for the day.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/models.Food'
        "400":
          description: invalid meal type
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets the food in the database required to generate QR code
      tags:
      - Food
  /staff/getbrunchtimetable:
    get:
      consumes:
      - application/json
      description: Kitchen staff gets the timetable for brunch for a particular date.
        It is an authorized route to only KITCHEN STAFF
      produces:
      - application/json
      responses:
        "200":
          description: successfully gotten
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets food for brunch
      tags:
      - Users
  /staff/getdinnertimetable:
    get:
      consumes:
      - application/json
      description: Kitchen staff gets the timetable for dinner for a particular date.
        It is an authorized route to only KITCHEN STAFF
      produces:
      - application/json
      responses:
        "200":
          description: successfully gotten
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets food for dinner
      tags:
      - Users
  /staff/gettotalusers:
    get:
      consumes:
      - application/json
      description: Kitchen staff gets total number of food beneficiaries. It is an
        authorized route to only KITCHEN STAFF
      produces:
      - application/json
      responses:
        "200":
          description: Total number of users
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get total number of food beneficiaries
      tags:
      - Users
  /staff/getusers:
    get:
      consumes:
      - application/json
      description: Kitchen staff gets list of food beneficiaries. It is an authorized
        route to only KITCHEN STAFF
      produces:
      - application/json
      responses:
        "200":
          description: food beneficiaries found successfully
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: GetsFood Beneficiaries
      tags:
      - Users
  /staff/removefoodbeneficiary/{id}:
    delete:
      consumes:
      - application/json
      description: Admin deletes/removes a food beneficiary from the dashboard. It
        is an authorized route to only ADMIN
      produces:
      - application/json
      responses:
        "200":
          description: food beneficiary removed
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Remove a Food Beneficiary
      tags:
      - Users
  /staff/searchbeneficiary/:text:
    get:
      consumes:
      - application/json
      description: Kitchen staff can search for a food beneficiary by name, location
        or stack. It is an authorized route to only KITCHEN STAFF
      produces:
      - application/json
      responses:
        "200":
          description: information gotten
          schema:
            type: number
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Search Food Beneficiary
      tags:
      - Users
  /user/adminlogin:
    post:
      consumes:
      - application/json
      description: Allows Admin to log in in order to use app dashboard. Admin must
        be active before he or she can log in
      parameters:
      - description: email, password
        in: body
        name: kitchenStaff
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Login Admin
      tags:
      - Users
  /user/adminsignup:
    post:
      consumes:
      - application/json
      description: creates a user
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Create User
      tags:
      - Users
  /user/adminverifyemail/{token}:
    patch:
      consumes:
      - application/json
      description: verifies an admin email
      parameters:
      - description: Token string
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Verify Email
      tags:
      - Users
  /user/allfood:
    get:
      consumes:
      - application/json
      description: This should be used to get all the food in the database meant for
        today. This should be used instead of GetBrunch and GetDinner seperately for
        scalability purpose when rendering on the Beneficiary dashboard. Frontend
        can seperate dinner and brunch.
      produces:
      - application/json
      responses:
        "200":
          description: Food successfully gotten
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets all the food in the database using the date of the present day
      tags:
      - Users
  /user/benefactorlogin:
    post:
      consumes:
      - application/json
      description: Allows Food Beneficiary to log in in order to use app dashboard.
        Beneficiary must be active before he or she can log in
      parameters:
      - description: email, password
        in: body
        name: kitchenStaff
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Login Food Beneficiary
      tags:
      - Users
  /user/beneficiarysignup:
    post:
      consumes:
      - application/json
      description: creates a user
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.FoodBeneficiary'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Create User
      tags:
      - Users
  /user/beneficiaryverifyemail/{token}:
    patch:
      consumes:
      - application/json
      description: verifies a food beneficiary email
      parameters:
      - description: Token string
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Verify Email
      tags:
      - Users
  /user/brunch:
    get:
      consumes:
      - application/json
      description: Gets all the brunch in the database meant for today. GetAllFood
        should be used instead for scalability purpose when rendering on the Beneficiary
        dashboard. Frontend can filter brunch and dinner.
      produces:
      - application/json
      responses:
        "200":
          description: Brunch found
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets all the brunch in the database using the date of the present day
      tags:
      - Users
  /user/dinner:
    get:
      consumes:
      - application/json
      description: Gets all the dinner in the database meant for today. GetAllFood
        should be used instead for scalability purpose when rendering on the Beneficiary
        dashboard. Frontend can filter brunch and dinner.
      produces:
      - application/json
      responses:
        "200":
          description: Dinner found
          schema:
            items:
              $ref: '#/definitions/models.Food'
            type: array
        "500":
          description: internal server error
          schema:
            type: string
      summary: Gets all the dinner in the database using the date of the present day
      tags:
      - Users
  /user/kitchenstafflogin:
    post:
      consumes:
      - application/json
      description: Allows Kitchen staff to log in in order to use app dashboard. Staff
        must be active before he or she can log in
      parameters:
      - description: email, password
        in: body
        name: kitchenStaff
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Login Kitchen Staff
      tags:
      - Users
  /user/kitchenstaffsignup:
    post:
      consumes:
      - application/json
      description: creates a user
      parameters:
      - description: Add user
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/models.KitchenStaff'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Create User
      tags:
      - Users
  /user/kitchenstaffverifyemail/{token}:
    patch:
      consumes:
      - application/json
      description: verifies a kitchen staff email
      parameters:
      - description: Token string
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: error
          schema:
            type: string
        "404":
          description: error
          schema:
            type: string
        "500":
          description: error
          schema:
            type: string
      summary: Verify Email
      tags:
      - Users
  /user/notifications:
    get:
      consumes:
      - application/json
      description: Returns all notifications in the database and their dates to be
        rendered as will by the frontend
      produces:
      - application/json
      responses:
        "200":
          description: notification successfully loaded
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "500":
          description: internal server error
          schema:
            type: string
      summary: Notifies users whenever there is a change worthy of notification
      tags:
      - Notification
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
